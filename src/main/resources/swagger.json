{
  "swagger": "2.0",
  "info": {
    "description": "Stack Overflow API",
    "version": "1.2.0",
    "title": "Stack Overflow API",
    "termsOfService": "",
    "contact": {
      "email": "napal@cisco.com"
    }
  },
  "host": "localhost:8283",
  "basePath": "/v1",
  "tags": [
    {
      "name": "User",
      "description": "Operations about user"
    },
    {
      "name": "Questions",
      "description": "Everything about questions"
    },
    {
      "name": "Answers",
      "description": "Everything about answers"
    },
    {
      "name": "Comments",
      "description": "Everything about comments"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "HTTP_BASIC": []
    }
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register new user",
        "description": "",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-contentType": "application/json",
        "x-accepts": "application/json"
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "User"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "x-contentType": "application/json",
        "x-accepts": "application/json"
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logs out current logged in user",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-contentType": "application/json",
        "x-accepts": "application/json"
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "User"
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-contentType": "application/json",
        "x-accepts": "application/json"
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "User"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-contentType": "application/json",
        "x-accepts": "application/json"
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-contentType": "application/json",
        "x-accepts": "application/json"
      }
    },
    "/questions": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get all the questions",
        "description": "List all questions or search questions based on title, description and tags",
        "parameters": [
          {
            "name": "$size",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Size of the page to retrieve.",
            "x-example": 10
          },
          {
            "name": "$page",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of the page to retrieve.",
            "x-example": 1
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Allows to filter the questions by title",
            "x-example": "test question"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Allows to filter the questions by description",
            "x-example": "test description"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Allows to filter the questions by tags",
            "x-example": "java"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "title",
                  "description"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Auto-generated primary key field"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "lastEditor": {
                    "type": "string",
                    "example": "Williams"
                  },
                  "lastEditDate": {
                    "type": "string"
                  },
                  "createdOn": {
                    "type": "string"
                  },
                  "upVote": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "example": 1
                  },
                  "downVote": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "example": 1
                  },
                  "answers": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "comments": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                },
                "description": "A representation of an Answer.",
                "example": "{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"description\": \"answer description\"\n}"
              }
            },
            "examples": {
              "application/json": "[{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"title\": \"question title\",\n  \"description\": \"question description\"\n}]"
            },
            "headers": {
              "X-Page-Count": {
                "type": "integer",
                "x-example": 1
              },
              "X-Page-Number": {
                "type": "integer",
                "x-example": 1
              },
              "X-Page-Size": {
                "type": "integer",
                "x-example": 25
              },
              "X-Total-Count": {
                "type": "integer",
                "x-example": 2
              }
            }
          },
          "400": {
            "description": "Status 400",
            "schema": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "minimum": 400,
                  "maximum": 599
                },
                "description": {
                  "type": "string",
                  "example": "Bad query parameter [$size]: Invalid integer value [abc]"
                },
                "reasonPhrase": {
                  "type": "string",
                  "example": "Bad Request"
                }
              },
              "description": "This general error structure is used throughout this API.",
              "example": "{\n  \"code\": 400,\n  \"description\": \"Bad query parameter [$size]: Invalid integer value [abc]\",\n  \"reasonPhrase\": \"Bad Request\"\n}"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Create a Question",
        "description": "Adds a Question",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title",
                "description"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Auto-generated primary key field"
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "owner": {
                  "type": "string"
                },
                "lastEditor": {
                  "type": "string",
                  "example": "Williams"
                },
                "lastEditDate": {
                  "type": "string"
                },
                "createdOn": {
                  "type": "string"
                },
                "upVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                },
                "downVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                },
                "answers": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "description": "A representation of an Answer.",
              "example": "{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"description\": \"answer description\"\n}"
            },
            "x-examples": {
              "application/json": "{\n  \"title\": \"question title\",\n  \"description\": \"question description\"\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/questions/{questionId}": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get a specific question",
        "description": "",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Question",
            "x-example": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "type": "object",
              "required": [
                "title",
                "description"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Auto-generated primary key field"
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "owner": {
                  "type": "string"
                },
                "lastEditor": {
                  "type": "string",
                  "example": "Williams"
                },
                "lastEditDate": {
                  "type": "string"
                },
                "createdOn": {
                  "type": "string"
                },
                "upVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                },
                "downVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                },
                "answers": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "description": "A representation of a Question.",
              "example": "{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"description\": \"question description\"\n}"
            },
            "examples": {
              "application/json": "[{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"title\": \"question title\",\n  \"description\": \"question description\"\n}]"
            }
          },
          "400": {
            "description": "Status 400",
            "schema": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "minimum": 400,
                  "maximum": 599
                },
                "description": {
                  "type": "string",
                  "example": "Bad query parameter [$size]: Invalid integer value [abc]"
                },
                "reasonPhrase": {
                  "type": "string",
                  "example": "Bad Request"
                }
              },
              "description": "This general error structure is used throughout this API.",
              "example": "{\n  \"code\": 400,\n  \"description\": \"Bad query parameter [$size]: Invalid integer value [abc]\",\n  \"reasonPhrase\": \"Bad Request\"\n}"
            }
          }
        }
      }
    },
    "/questions/{questionId}/answers": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Answer a question",
        "description": "Adds an answer to a question",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "description"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Auto generated id"
                },
                "description": {
                  "type": "string"
                },
                "by": {
                  "type": "string",
                  "example": "Williams"
                },
                "on": {
                  "type": "integer",
                  "format": "int64",
                  "description": "timestamp (in ms)",
                  "example": 173664000000
                },
                "lastEditor": {
                  "type": "string",
                  "example": "Williams"
                },
                "lastEditDate": {
                  "type": "string"
                },
                "upVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                },
                "downVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                }
              },
              "description": "A representation of an Answer.",
              "example": "{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"title\": \"answer title\",\n  \"description\": \"answer description\"\n}"
            },
            "x-examples": {
              "application/json": "{\n  \"description\": \"answer description\"\n}"
            }
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Question",
            "x-example": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "type": "object",
              "required": [
                "description"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Auto generated id"
                },
                "description": {
                  "type": "string"
                },
                "by": {
                  "type": "string",
                  "example": "Williams"
                },
                "on": {
                  "type": "integer",
                  "format": "int64",
                  "description": "timestamp (in ms)",
                  "example": 173664000000
                },
                "lastEditor": {
                  "type": "string",
                  "example": "Williams"
                },
                "lastEditDate": {
                  "type": "string"
                },
                "upVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                },
                "downVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                }
              },
              "description": "A representation of an Answer.",
              "example": "{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"title\": \"answer title\",\n  \"description\": \"answer description\"\n}"
            }
          }
        }
      }
    },
    "/questions/{questionId}/answers/{answerId}": {
      "put": {
        "tags": [
          "Answers"
        ],
        "summary": "Update an Answer",
        "description": "Updates an answer for a specific question",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "description"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Auto generated id"
                },
                "description": {
                  "type": "string"
                },
                "by": {
                  "type": "string",
                  "example": "Williams"
                },
                "on": {
                  "type": "integer",
                  "format": "int64",
                  "description": "timestamp (in ms)",
                  "example": 173664000000
                },
                "lastEditor": {
                  "type": "string",
                  "example": "Williams"
                },
                "lastEditDate": {
                  "type": "string"
                },
                "upVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                },
                "downVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                }
              },
              "description": "A representation of an Answer.",
              "example": "{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"title\": \"answer title\",\n  \"description\": \"answer description\"\n}"
            },
            "x-examples": {
              "application/json": "{\n  \"description\": \"answer description\"\n}"
            }
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Question",
            "x-example": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f"
          },
          {
            "name": "answerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Answer",
            "x-example": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "type": "object",
              "required": [
                "description"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Auto generated id"
                },
                "description": {
                  "type": "string"
                },
                "by": {
                  "type": "string",
                  "example": "Williams"
                },
                "on": {
                  "type": "integer",
                  "format": "int64",
                  "description": "timestamp (in ms)",
                  "example": 173664000000
                },
                "lastEditor": {
                  "type": "string",
                  "example": "Williams"
                },
                "lastEditDate": {
                  "type": "string"
                },
                "upVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                },
                "downVote": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "example": 1
                }
              },
              "description": "A representation of an Answer.",
              "example": "{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"title\": \"answer title\",\n  \"description\": \"answer description\"\n}"
            }
          }
        }
      }
    },
    "/questions/{questionId}/vote": {
      "put": {
        "tags": [
          "Questions"
        ],
        "summary": "Vote a question",
        "description": "Updates either up-vote or down-vote count for a question",
        "consumes": [],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "description": "Either a positive or negative value of vote count",
            "required": true,
            "type": "integer"
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Question",
            "x-example": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/questions/{questionId}/answers/{answerId}/vote": {
      "put": {
        "tags": [
          "Answers"
        ],
        "summary": "Vote an answer",
        "description": "Updates either up-vote or down-vote count for a answer",
        "consumes": [],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "description": "Either a positive or negative value of vote count",
            "required": true,
            "type": "integer"
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Question",
            "x-example": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f"
          },
          {
            "name": "answerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Answer",
            "x-example": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "HTTP_BASIC": {
      "description": "All GET methods are public. Write operations require authentication.",
      "type": "basic"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "username"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Answer": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Auto generated id"
        },
        "description": {
          "type": "string"
        },
        "by": {
          "type": "string",
          "example": "Williams"
        },
        "on": {
          "type": "integer",
          "format": "int64",
          "description": "timestamp (in ms)",
          "example": 173664000000
        },
        "lastEditor": {
          "type": "string",
          "example": "Williams"
        },
        "lastEditDate": {
          "type": "string"
        },
        "upVote": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "example": 1
        },
        "downVote": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "example": 1
        }
      },
      "description": "A representation of an Answer.",
      "example": "{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"title\": \"answer title\",\n  \"description\": \"answer description\"\n}"
    },
    "Question": {
      "type": "object",
      "required": [
        "title",
        "description"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Auto-generated primary key field"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "lastEditor": {
          "type": "string",
          "example": "Williams"
        },
        "lastEditDate": {
          "type": "string"
        },
        "createdOn": {
          "type": "string"
        },
        "upVote": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "example": 1
        },
        "downVote": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "example": 1
        },
        "answers": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "description": "A representation of an Answer.",
      "example": "{\n  \"id\": \"0e8dd830-ad98-11e6-bf2e-47644ada7c0f\",\n  \"description\": \"answer description\"\n}"
    },
    "Error": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "minimum": 400,
          "maximum": 599
        },
        "description": {
          "type": "string",
          "example": "Bad query parameter [$size]: Invalid integer value [abc]"
        },
        "reasonPhrase": {
          "type": "string",
          "example": "Bad Request"
        }
      },
      "description": "This general error structure is used throughout this API.",
      "example": "{\n  \"code\": 400,\n  \"description\": \"Bad query parameter [$size]: Invalid integer value [abc]\",\n  \"reasonPhrase\": \"Bad Request\"\n}"
    }
  }
}
